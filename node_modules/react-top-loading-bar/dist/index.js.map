{"version":3,"file":"index.js","sources":["../src/useInterval.ts","../src/utils.ts","../src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomValue(min: number, max: number): number {\n  return (Math.random() * (max - min + 1) + min)\n}\n\nexport function randomInt(min: number, max: number): number {\n  return Math.floor(randomValue(min, max))\n}\n","import * as React from 'react'\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt, randomValue } from './utils'\n\nexport type IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  containerClassName?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n  style?: CSSProperties\n  containerStyle?: CSSProperties\n  shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n  continuousStart: (startingValue?: number, refreshRate?: number) => void\n  staticStart: (startingValue?: number) => void\n  complete: () => void;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = ''\n    },\n    ref\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0)\n\n    const pressedContinuous = useRef<{\n      active: boolean\n      refreshRate: number\n    }>({ active: false, refreshRate: 1000 })\n\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      }\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue?: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n\n        pressedContinuous.current = ({\n          active: true,\n          refreshRate,\n        })\n\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue?: number) {\n        if (pressedContinuous.current.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.current.active) {\n              // if we have continuous loader just ending, we kill it and reset it\n\n              pressedContinuous.current = {\n                ...pressedContinuous.current,\n                active: false,\n              };\n\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const minValue = Math.min(10, (100 - localProgress) / 5);\n        const maxValue =  Math.min(20, (100 - localProgress) / 3)\n\n        const random = randomValue(minValue, maxValue);\n\n        if (localProgress + random < 95) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.current.active ? pressedContinuous.current.refreshRate : null\n    )\n\n    return (\n      <div className={containerClassName} style={{...loaderContainerStyle, ...containerStyle}}>\n        <div className={className} style={{...loaderStyle, ...style}}>\n          {shadow ? <div style={{...shadowStyle, ...shadowStyleProp}} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default LoadingBar\n"],"names":["noop","randomValue","min","max","Math","random","randomInt","floor","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","useRef","useState","localProgress","localProgressSet","pressedContinuous","active","refreshRate","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","loaderContainerStyle","position","top","left","zIndex","width","initialShadowStyles","boxShadow","opacity","transition","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useEffect","current","useImperativeHandle","continuousStart","startingValue","console","warn","val","checkIfFull","staticStart","complete","undefined","callback","delay","savedCallback","_progress","setTimeout","_loaderStyle","immediate","id","setInterval","clearInterval","React"],"mappings":"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"}